// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"github.com/boreq/eggplant/adapters/auth"
	"github.com/boreq/eggplant/adapters/music/library"
	"github.com/boreq/eggplant/application"
	auth2 "github.com/boreq/eggplant/application/auth"
	"github.com/boreq/eggplant/application/music"
	"github.com/boreq/eggplant/application/queries"
	"github.com/boreq/eggplant/cmd/eggplant/commands/config"
	"github.com/boreq/eggplant/cmd/eggplant/commands/service"
	"github.com/boreq/eggplant/ports/http"
)

// Injectors from wire.go:

func BuildService(conf *config.Config) (*service.Service, error) {
	db, err := newBolt(conf)
	if err != nil {
		return nil, err
	}
	bcryptPasswordHasher := auth.NewBcryptPasswordHasher()
	cryptoAccessTokenGenerator := auth.NewCryptoAccessTokenGenerator()
	userRepository, err := auth.NewUserRepository(db, bcryptPasswordHasher, cryptoAccessTokenGenerator)
	if err != nil {
		return nil, err
	}
	registerInitialHandler := auth2.NewRegisterInitialHandler(userRepository)
	registerHandler := auth2.NewRegisterHandler(userRepository)
	loginHandler := auth2.NewLoginHandler(userRepository)
	logoutHandler := auth2.NewLogoutHandler(userRepository)
	checkAccessTokenHandler := auth2.NewCheckAccessTokenHandler(userRepository)
	listHandler := auth2.NewListHandler(userRepository)
	createInvitationHandler := auth2.NewCreateInvitationHandler(userRepository)
	applicationAuth := application.Auth{
		RegisterInitial:  registerInitialHandler,
		Register:         registerHandler,
		Login:            loginHandler,
		Logout:           logoutHandler,
		CheckAccessToken: checkAccessTokenHandler,
		List:             listHandler,
		CreateInvitation: createInvitationHandler,
	}
	store, err := newThumbnailStore(conf)
	if err != nil {
		return nil, err
	}
	thumbnailHandler := music.NewThumbnailHandler(store)
	trackStore, err := newTrackStore(conf)
	if err != nil {
		return nil, err
	}
	trackHandler := music.NewTrackHandler(trackStore)
	delimiterAccessLoader := library.NewDelimiterAccessLoader()
	idGenerator := library.NewIdGenerator()
	libraryLibrary, err := newLibrary(delimiterAccessLoader, trackStore, store, idGenerator, conf)
	if err != nil {
		return nil, err
	}
	browseHandler := music.NewBrowseHandler(libraryLibrary)
	applicationMusic := application.Music{
		Thumbnail: thumbnailHandler,
		Track:     trackHandler,
		Browse:    browseHandler,
	}
	statsHandler := queries.NewStatsHandler(userRepository, trackStore, store)
	applicationQueries := application.Queries{
		Stats: statsHandler,
	}
	applicationApplication := &application.Application{
		Auth:    applicationAuth,
		Music:   applicationMusic,
		Queries: applicationQueries,
	}
	handler, err := http.NewHandler(applicationApplication)
	if err != nil {
		return nil, err
	}
	server := http.NewServer(handler)
	serviceService := service.NewService(server)
	return serviceService, nil
}
